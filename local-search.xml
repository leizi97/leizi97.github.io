<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Opencvnodejs4-264转mp4</title>
    <link href="/2022/01/12/javascript/opencvnodejs4-264%E8%BD%ACmp4/"/>
    <url>/2022/01/12/javascript/opencvnodejs4-264%E8%BD%ACmp4/</url>
    
    <content type="html"><![CDATA[<h2 id="opencvnodejs4-264转mp4"><a href="#opencvnodejs4-264转mp4" class="headerlink" title="opencvnodejs4-264转mp4"></a>opencvnodejs4-264转mp4</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> cv2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;opencvnodejs4&quot;</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@params </span>video264Path 264视频路径</span><br><span class="hljs-comment">* <span class="hljs-doctag">@params </span>mp4Path 保存mp4的路径</span><br><span class="hljs-comment">* <span class="hljs-doctag">@params </span>Fps 视频帧数</span><br><span class="hljs-comment">* <span class="hljs-doctag">@returns </span>totalFrame 总帧数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">v264Tomp4</span>(<span class="hljs-params">video264Path, mp4Path, Fps</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> fourcc = cv2.VideoWriter.fourcc(<span class="hljs-string">&#x27;MP4V&#x27;</span>); <span class="hljs-comment">//编码，可能会出现提示，但是生成的mp4可以正确运行</span><br>    <span class="hljs-keyword">let</span> writer = <span class="hljs-literal">null</span>; <br>    <span class="hljs-keyword">const</span> Vcap = <span class="hljs-keyword">new</span> cv2.VideoCapture(video264Path)<br>    <span class="hljs-keyword">let</span> totalFrame = <span class="hljs-number">0</span>; <span class="hljs-comment">//记录总帧数，264视频总帧数获取出来为负数，也无法使用set跳转到某一帧</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">const</span> frame = <span class="hljs-keyword">await</span> Vcap.readAsync(); <span class="hljs-comment">//type:Mat Mat.cols:width  Mat.rows: height</span><br>        totalFrame += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(frame.empty) &#123;<br>            Vcap.release()<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!writer) &#123;<br>            writer = <span class="hljs-keyword">new</span> cv2.VideoWriter(mp4Path, fourcc, <span class="hljs-built_in">parseInt</span>(Fps), <span class="hljs-keyword">new</span> cv2.Size(frame.cols, frame.rows)); <span class="hljs-comment">//Size无法随意设置，只能读取到某一帧，然后使用这一帧的大小来设置</span><br>        &#125;<br>        <span class="hljs-keyword">await</span> writer.writeAsync(frame)<br>    &#125;<br>    writer &amp;&amp; writer.release()<br>    <span class="hljs-keyword">return</span> totalFrame<br>&#125;<br>v264Tomp4(<span class="hljs-string">&#x27;D:/xxxx/xxx/a.264&#x27;</span>, <span class="hljs-string">&#x27;F:/yyy/yyy/b.mp4&#x27;</span>, <span class="hljs-number">60</span>); <span class="hljs-comment">//执行</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
      <category>nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pyinstaller基础防反编译</title>
    <link href="/2022/01/12/python/pyinstaller%E5%9F%BA%E7%A1%80%E9%98%B2%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    <url>/2022/01/12/python/pyinstaller%E5%9F%BA%E7%A1%80%E9%98%B2%E5%8F%8D%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h2 id="pyinstaller基础防反编译"><a href="#pyinstaller基础防反编译" class="headerlink" title="pyinstaller基础防反编译"></a>pyinstaller基础防反编译</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>block_cipher = pyi_crypto.PyiBlockCipher(key=<span class="hljs-built_in">str</span>(time.time())) <span class="hljs-comment"># </span><br><br><br>a = Analysis(<br>    [<span class="hljs-string">&#x27;main.py&#x27;</span>],<br>    pathex=[<span class="hljs-string">&#x27;C:\self\programs\deTest\pytest&#x27;</span>], <span class="hljs-comment"># change to your path</span><br>    binaries=[],<br>    datas=[],<br>    hiddenimports=[],<br>    hookspath=[],<br>    runtime_hooks=[],<br>    excludes=[],<br>    win_no_prefer_redirects=<span class="hljs-literal">False</span>,<br>    win_private_assemblies=<span class="hljs-literal">False</span>,<br>    cipher=block_cipher,<br>    noarchive=<span class="hljs-literal">False</span><br>)<br>pyz = PYZ(<br>    a.pure,<br>    a.zipped_data,<br>    cipher=block_cipher<br>)<br>exe = EXE(<br>    pyz,<br>    a.scripts,<br>    a.binaries,<br>    a.zipfiles,<br>    a.datas,<br>    [],<br>    name=<span class="hljs-string">&#x27;main&#x27;</span>,<br>    debug=<span class="hljs-literal">False</span>,<br>    bootloader_ignore_signals=<span class="hljs-literal">False</span>,<br>    strip=<span class="hljs-literal">False</span>,<br>    upx=<span class="hljs-literal">True</span>,<br>    upx_exclude=[],<br>    runtime_tmpdir=<span class="hljs-literal">None</span>,<br>    console=<span class="hljs-literal">True</span><br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>pyinstaller</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pyside2 minio上传进度条无法触发信号的问题</title>
    <link href="/2021/12/29/python/Pyside2%20minio%E4%B8%8A%E4%BC%A0%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%97%A0%E6%B3%95%E8%A7%A6%E5%8F%91%E4%BF%A1%E5%8F%B7%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/12/29/python/Pyside2%20minio%E4%B8%8A%E4%BC%A0%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%97%A0%E6%B3%95%E8%A7%A6%E5%8F%91%E4%BF%A1%E5%8F%B7%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>pyside2使用python的minio api上传文件时，出现时进度条不更新的bug，代码如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> xxx <span class="hljs-keyword">import</span> minioClient<br><span class="hljs-keyword">from</span> xxx <span class="hljs-keyword">import</span> Progress<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UpLoadSplitProgressBar</span>(<span class="hljs-params">QDialog</span>):</span><br>    <span class="hljs-comment">#... 代码</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, ...</span>):</span><br>        <span class="hljs-built_in">super</span>(UpLoadSplitProgressBar, self).__init__(parent)<br>        <span class="hljs-comment">#...  代码</span><br>        self.progress = Progress()  <span class="hljs-comment"># 进度线程</span><br>  self.progress.progress_signal.progress.connect(self.update_progress) <span class="hljs-comment"># 编号为1 Qt.DirectConnection</span><br>        <br>    <span class="hljs-comment"># 上传文件</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upload</span>(<span class="hljs-params">self, ...</span>):</span><br>        minioClient.put_object(MINIO_PLATFORM_BUCKET, upload_path,<br>                           file_data, origFileSize, progress=self.progress)<br>        <br><span class="hljs-meta">@Slot(<span class="hljs-params"><span class="hljs-built_in">int</span></span>)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_progress</span>(<span class="hljs-params">self, size</span>):</span><br>        <span class="hljs-built_in">print</span>(size) <span class="hljs-comment"># 编号为2</span><br></code></pre></td></tr></table></figure><p>其中progress为minio的一个可选参数，需要传入一个线程对象，</p><p>以下为线程对象关键代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 信号对象</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkerSignals</span>(<span class="hljs-params">QObject</span>):</span><br>    progress = Signal(<span class="hljs-built_in">int</span>)<br>    up_done = Signal(<span class="hljs-built_in">int</span>)<br>   <br><span class="hljs-comment"># 进度线程对象        </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Progress</span>(<span class="hljs-params">Thread</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, progress_index=<span class="hljs-number">1</span>, interval=<span class="hljs-number">1</span></span>):</span><br>        Thread.__init__(self)<br>        <span class="hljs-comment">#... 代码</span><br>        self.progress_signal = WorkerSignals()<br>        <span class="hljs-comment">#... 代码</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>        task = self.display_queue.get(timeout=self.interval)<br>        <span class="hljs-keyword">except</span> queue_empty:<br>        <span class="hljs-keyword">continue</span><br>        upsize, current_size, total_length = task<br>        self.progress_signal.progress.emit(upsize) <span class="hljs-comment"># 编号为3</span><br>        <span class="hljs-comment">#... 代码</span><br></code></pre></td></tr></table></figure><p>在队列拿到task的upsize之后，需要把upsize通过信号的方式传递出去 如<strong>3号</strong>代码</p><p><strong>但是在进度条窗口弹出之后，进度一直是0</strong> </p><blockquote><p>排查后发现，当文件上传完成之后，<strong>2号</strong>代码才被逐一触发，在这之前，代码运行是完成了，但是信号没有触发，而是被存储到了一个信号队列里，并且<strong>阻塞住</strong>了</p></blockquote><p>最后根据信号文档</p><p><img src="/img/python/Pyside2-minio%E4%B8%8A%E4%BC%A0%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%97%A0%E6%B3%95%E8%A7%A6%E5%8F%91%E4%BF%A1%E5%8F%B7%E7%9A%84%E9%97%AE%E9%A2%98_1.png" alt="img"></p><p>只需要将<strong>1号</strong>代码改为如下就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> xxx <span class="hljs-keyword">import</span> minioClient<br><span class="hljs-keyword">from</span> xxx <span class="hljs-keyword">import</span> Progress<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UpLoadSplitProgressBar</span>(<span class="hljs-params">QDialog</span>):</span><br>    <span class="hljs-comment">#... 代码</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, ...</span>):</span><br>        <span class="hljs-built_in">super</span>(UpLoadSplitProgressBar, self).__init__(parent)<br>        <span class="hljs-comment">#...  代码</span><br>        self.progress = Progress()  <span class="hljs-comment"># 进度线程</span><br>  self.progress.progress_signal.progress.connect(self.update_progress, Qt.DirectConnection) <span class="hljs-comment"># 编号为1 </span><br>        <br>    <span class="hljs-comment"># 上传文件</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upload</span>(<span class="hljs-params">self, ...</span>):</span><br>        minioClient.put_object(MINIO_PLATFORM_BUCKET, upload_path,<br>                           file_data, origFileSize, progress=self.progress)<br>        <br><span class="hljs-meta">@Slot(<span class="hljs-params"><span class="hljs-built_in">int</span></span>)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_progress</span>(<span class="hljs-params">self, size</span>):</span><br>        <span class="hljs-built_in">print</span>(size) <span class="hljs-comment"># 编号为2</span><br></code></pre></td></tr></table></figure><p>此时会启动一个信号线程，信号不会阻塞，触发之后，信号就会直接发送并触发<strong>2号</strong>代码。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>pyside2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
      <tag>bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pyside2右键菜单添加快捷键无效的解决办法</title>
    <link href="/2021/12/11/python/Pyside2%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2021/12/11/python/Pyside2%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>今天在QDockWidget里加入了一个自定义的右键菜单，并加入了快捷键，代码如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span>(<span class="hljs-params">QDockWidget</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-built_in">super</span>(Demo,self).__init__(parent)<br>        self.menu = QMenu(self)  <span class="hljs-comment">#  加入菜单</span><br>        self.test_action = self.menu.addAction(self.tr(<span class="hljs-string">&#x27;菜单项1&#x27;</span>))<br>        self.test_action.setShortCut(QKeySequence(Qt.Key_E))  <span class="hljs-comment">#  快捷键为键盘的E键</span><br>        self.connection()<br>        self.setContextMenuPolicy(Qt.CustomContextMenu)<br>    <br>    <span class="hljs-comment">#  连接信号处理方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">connection</span>(<span class="hljs-params">self</span>):</span><br>        self.test_action.triggered.connect(self.test_func)<br>        self.customContextMenuRequested.connect(self.showContextMenu, Qt.UniqueConnection)  <span class="hljs-comment">#  右键菜单触发的事件</span><br>    <br>    <span class="hljs-comment">#  菜单项1触发的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_func</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;触发 菜单项1&#x27;</span>)<br>        <br>    <span class="hljs-comment">#  显示右键菜单</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">showContextMenu</span>(<span class="hljs-params">self, pos</span>):</span><br>        self.menu.move(QCursor.pos())<br>        self.menu.show()<br>        <br></code></pre></td></tr></table></figure><blockquote><p>但是在右键出现菜单之后，<strong>点击键盘 e 键 并没有触发对应的方法</strong></p><p>明明加上了快捷键，但是没有起作用</p></blockquote><blockquote><p>后续经过多次尝试，原来，对于以上这个情况想要加入菜单的快捷键，你需要使用<strong>QShortcut</strong>，将这个类实例的parent设置为Qmenu实例(self.menu)，代码如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span>(<span class="hljs-params">QDockWidget</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-built_in">super</span>(Demo,self).__init__(parent)<br>        self.menu = QMenu(self)  <span class="hljs-comment">#  加入菜单</span><br>        self.test_action = self.menu.addAction(self.tr(<span class="hljs-string">&#x27;菜单项1&#x27;</span>))<br>        self.test_action_shortcut = QShortcut(QKeySequence(Qt.Key_E), self.menu) <br>        self.test_action.setShortCut(QKeySequence(Qt.Key_E))  <span class="hljs-comment">#  快捷键为键盘的E键</span><br>        self.connection()<br>        self.setContextMenuPolicy(Qt.CustomContextMenu)<br>    <br>    <span class="hljs-comment">#  连接信号处理方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">connection</span>(<span class="hljs-params">self</span>):</span><br>        self.test_action.triggered.connect(self.test_func)  <span class="hljs-comment">#  绑定菜单项1触发时候的方法</span><br>        self.test_action_shortcut.activated.connect(self.test_func)  <span class="hljs-comment">#  绑定快捷键需要触发的方法，同菜单项1</span><br>        self.customContextMenuRequested.connect(self.showContextMenu, Qt.UniqueConnection)  <span class="hljs-comment">#  右键菜单触发的事件</span><br>    <br>    <span class="hljs-comment">#  菜单项1触发的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_func</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;触发 菜单项1&#x27;</span>)<br>        <br>    <span class="hljs-comment">#  显示右键菜单</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">showContextMenu</span>(<span class="hljs-params">self, pos</span>):</span><br>        self.menu.move(QCursor.pos())<br>        self.menu.show()<br></code></pre></td></tr></table></figure><p>问题解决，点击右键出现菜单，再敲击键盘e，触发了test_func</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>pyside2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
      <tag>bug修复</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pyside2 QtWebEngine 打包中文目录无法运行的问题</title>
    <link href="/2021/12/08/python/Pyside2-QtWebEngine-%E6%89%93%E5%8C%85%E4%B8%AD%E6%96%87%E7%9B%AE%E5%BD%95%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/12/08/python/Pyside2-QtWebEngine-%E6%89%93%E5%8C%85%E4%B8%AD%E6%96%87%E7%9B%AE%E5%BD%95%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>我的Pyside2项目使用pyinstaller打包，打包后目录里存在一个qt.conf文件</p><p><strong>你需要在 qt.conf 里正确的指定打包后的Pyside2的配置目录，如下</strong></p><p><img src="/img/python/Pyside2-QtWebEngine-%E6%89%93%E5%8C%85%E4%B8%AD%E6%96%87%E7%9B%AE%E5%BD%95%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/img1.png" alt="image-20211208170550823"></p><p>在你运行程序的时候，<strong>QtWebEngine</strong>才能正确的找到下面这些文件</p><p><img src="/img/python/Pyside2-QtWebEngine-%E6%89%93%E5%8C%85%E4%B8%AD%E6%96%87%E7%9B%AE%E5%BD%95%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/img2.png" alt="image-20211208170913010"></p><p>打包后在中文目录也可以运行了!</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>pyside2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打包</tag>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
